#!/usr/bin/env python3

import random
import optparse
from games_puzzles_algorithms.games.hex.cli import Cli as HexCli
from games_puzzles_algorithms.players.rule_based.random_agent \
    import RandomAgent
from games_puzzles_algorithms.players.rule_based.first_action_agent \
    import FirstActionAgent
from games_puzzles_algorithms.players.mcts.mcts_agent import MctsAgent
from games_puzzles_algorithms.players.minimax.minimax_agent import MinimaxAgent


GAMES = {'hex': HexCli}
PUZZLES = {}
GAMES_AND_PUZZLES = {}
GAMES_AND_PUZZLES.update(GAMES)
GAMES_AND_PUZZLES.update(PUZZLES)

GAME_ALGS = {
    'random': lambda **kwargs: RandomAgent(kwargs['random_generator'].random),
    'first_action': lambda **_: FirstActionAgent(),
    'mcts': lambda **kwargs: MctsAgent(kwargs['random_generator']),
    'minimax': lambda **_: MinimaxAgent()}

DEFAULT_GAME_OR_PUZZLE = 'hex'

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option(
        "-r",
        "--random-seed",
        dest="random_seed",
        help="A seed for agents with randomness. Defaults to system time."
    )
    parser.add_option(
        "-s",
        "--script",
        dest="script",
        help="A script of commands to play out."
    )
    parser.add_option(
        "-g",
        "--game-or-puzzle",
        dest="game_or_puzzle",
        help="The game or puzzle to play. Options are {}. Default is {}"
            .format(list(GAMES_AND_PUZZLES.keys()), DEFAULT_GAME_OR_PUZZLE)
    )
    parser.add_option("-v", action="store_true", dest="verbose",
                      help="Show verbose logging information.")
    parser.add_option("-q", action="store_false", dest="verbose",
                      help="Show verbose logging information.")

    (options, args) = parser.parse_args()
    r = random.Random(options.random_seed)
    game_or_puzzle = GAMES_AND_PUZZLES[options.game_or_puzzle] \
        if options.game_or_puzzle else \
        GAMES_AND_PUZZLES[DEFAULT_GAME_OR_PUZZLE]

    if options.verbose:
        import logging
        logging.basicConfig(level=logging.DEBUG)
    try:
        # TODO Select algorithm
        cli = game_or_puzzle(GAME_ALGS['mcts'](random_generator=r))
        if options.script is not None:
            with open(options.script) as f:
                for command in f:
                    command = command.strip()
                    print("< " + command)
                    cli.onecmd(command)
        cli.cmdloop()
    except KeyboardInterrupt:
        pass
