#!/usr/bin/env python3

import random
import optparse
from games_puzzles_algorithms.games.hex.cli import Cli as HexCli
# from games_puzzles_algorithms.games.ttt.cli import Cli as TttCli
from games_puzzles_algorithms.players.rule_based.random_agent \
    import RandomAgent
from games_puzzles_algorithms.players.rule_based.first_action_agent \
    import FirstActionAgent
from games_puzzles_algorithms.players.mcts.mcts_agent import MctsAgent
from games_puzzles_algorithms.players.minimax.minimax_agent import MinimaxAgent


GAMES = {'hex': HexCli,
         #'ttt': TttCli
        }
ALGS = {
    'random': lambda **kwargs: RandomAgent(kwargs['random_generator'].random),
    'first': lambda **_: FirstActionAgent(),
    'MCTS': lambda **kwargs: MctsAgent(kwargs['random_generator']),
    'minimax': lambda **_: MinimaxAgent()}

DEFAULT_GAME = 'hex'
DEFAULT_ALG = 'MCTS'

if __name__ == '__main__':
    parser = optparse.OptionParser()
    parser.add_option(
        "-r",
        "--random-seed",
        dest="random_seed",
        help="A seed for agents with randomness. Defaults to system time."
    )
    parser.add_option(
        "-s",
        "--script",
        dest="script",
        help="A script of commands to play out."
    )
    parser.add_option(
        "-g",
        "--game",
        dest="game",
        help="The game to play. Options are {}. Default is {}."
            .format(list(GAMES.keys()), DEFAULT_GAME)
    )
    parser.add_option(
        "-a",
        "--algorithm",
        dest="algorithm",
        help=("The algorithm to use to play the selected game. Options are {}."
             + " Default is {}").format(list(ALGS.keys()), DEFAULT_ALG)
    )
    parser.add_option("-v", '--verbose', action="store_true", dest="verbose",
                      help="Show verbose output.")

    (options, args) = parser.parse_args()
    r = random.Random(options.random_seed)

    try:
        game = GAMES[options.game] \
            if options.game else GAMES[DEFAULT_GAME]
    except IndexError:
        print('ERROR: unrecognized game, \"{}\"'.format(options.game))

    try:
        algorithm = ALGS[options.algorithm] if options.algorithm else \
                    ALGS[DEFAULT_ALG]
    except IndexError:
        print('ERROR: unrecognized algorithm, \"{}\"'.format(
            options.algorithm))

    if options.verbose:
        import logging
        logging.basicConfig(level=logging.DEBUG)
    try:
        cli = game(algorithm(random_generator=r))
        if options.script is not None:
            with open(options.script) as f:
                for command in f:
                    command = command.strip()
                    print("< " + command)
                    cli.onecmd(command)
        cli.cmdloop()
    except KeyboardInterrupt:
        pass
